{"version":3,"sources":["components/organisms/AppBar/index.jsx","components/pages/PostEditor/index.jsx","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","component","variant","color","PostEditor","state","text","cursorPosition","showPicker","textareaRef","React","createRef","handleChange","event","_this","setState","target","value","addEmoji","emoji","prevState","textBefore","slice","textAfter","native","handleBlur","selectionStart","handleClick","current","replace","select","document","execCommand","alert","handleTogglePicker","handleClickAway","this","Fragment","organisms_AppBar","Grid_default","container","item","xs","sm","gutterBottom","paragraph","textFieldWrapper","TextField_default","id","label","multiline","rows","rowsMax","textField","onChange","onBlur","inputRef","margin","helperText","concat","length","ClickAwayListener_default","onClickAway","picker","dist_es","set","onSelect","buttons","Button_default","button","onClick","IconButton_default","aria-label","TagFaces_default","Component","theme","justifyContent","padding","spacing","unit","paddingLeft","paddingRight","display","alignItems","width","top","right","zIndex","App","CssBaseline_default","pages_PostEditor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4baf96b3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nfunction SimpleAppBar(props) {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography component=\"h2\" variant=\"h6\" color=\"inherit\">\n            Text for Instagram\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nSimpleAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleAppBar);\n","import React, { Component } from 'react';\nimport { Picker } from 'emoji-mart';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport FaceIcon from '@material-ui/icons/TagFaces';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport AppBar from '../../organisms/AppBar';\nimport 'emoji-mart/css/emoji-mart.css';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    padding: theme.spacing.unit * 2,\n  },\n  button: {\n    margin: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 4,\n    paddingRight: theme.spacing.unit * 4,\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n  },\n  container: {\n    padding: theme.spacing.unit * 2,\n  },\n  textField: {\n    width: '100%',\n  },\n  textFieldWrapper: {\n    position: 'relative',\n  },\n  picker: {\n    position: 'absolute',\n    top: '0',\n    right: '0',\n    zIndex: '1300',\n  },\n});\n\nclass PostEditor extends Component {\n  state = {\n    text: '',\n    cursorPosition: 0,\n    showPicker: false,\n  };\n\n  textareaRef = React.createRef();\n\n  handleChange = event => {\n    this.setState({ text: event.target.value });\n  };\n\n  addEmoji = emoji => {\n    this.setState(prevState => {\n      const textBefore = prevState.text.slice(0, prevState.cursorPosition);\n      const textAfter = prevState.text.slice(prevState.cursorPosition);\n      return { text: textBefore + emoji.native + textAfter };\n    });\n  };\n\n  handleBlur = event => {\n    this.setState({ cursorPosition: event.target.selectionStart });\n  };\n\n  handleClick = event => {\n    const rawText = this.textareaRef.current.value;\n    const text = rawText.replace(/\\s*\\n{2,}/g, '\\nâ €\\n').replace(/\\s+\\n/g, '\\n');\n    this.setState({ text }, () => {\n      this.textareaRef.current.select();\n      document.execCommand('copy');\n      alert('Text was successfully converted and copied to your clipboard');\n    });\n  };\n\n  handleTogglePicker = () => {\n    this.setState(prevState => ({ showPicker: !prevState.showPicker }));\n  };\n\n  handleClickAway = () => {\n    this.setState(prevState => ({ showPicker: false }));\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <>\n        <header>\n          <AppBar />\n        </header>\n        <main>\n          <Grid className={classes.root} container>\n            <Grid item xs={12} sm={10}>\n              <article>\n                <header>\n                  <Typography component=\"h1\" variant=\"h6\" gutterBottom>\n                    Clean and beautiful line breaks for Instagram\n                  </Typography>\n                  <Typography variant=\"body1\" paragraph>\n                    This tool allows you to add line breaks to Instagram without using awkward characters like '.' '-'\n                    etc. Simply type your text as you want it to appear (with line breaks) then tap 'convert' and paste\n                    to Instagram.\n                  </Typography>\n                </header>\n                <div className={classes.textFieldWrapper}>\n                  <TextField\n                    id=\"outlined-multiline-flexible\"\n                    label=\"Type here\"\n                    multiline\n                    rows=\"22\"\n                    rowsMax=\"28\"\n                    className={classes.textField}\n                    value={this.state.text}\n                    onChange={this.handleChange}\n                    onBlur={this.handleBlur}\n                    inputRef={this.textareaRef}\n                    margin=\"none\"\n                    helperText={`${this.state.text.length} characters, max 2000 by Instagram rules`}\n                    variant=\"outlined\"\n                  />\n                  <ClickAwayListener onClickAway={this.handleClickAway}>\n                    <div>\n                      {this.state.showPicker && (\n                        <div className={classes.picker}>\n                          <Picker set=\"apple\" onSelect={this.addEmoji} />\n                        </div>\n                      )}\n                    </div>\n                  </ClickAwayListener>\n                </div>\n              </article>\n              <div className={classes.buttons}>\n                <Button variant=\"outlined\" color=\"primary\" className={classes.button} onClick={this.handleClick}>\n                  Convert\n                </Button>\n                <IconButton color=\"primary\" aria-label=\"Emoji\" onClick={this.handleTogglePicker}>\n                  <FaceIcon />\n                </IconButton>\n              </div>\n            </Grid>\n          </Grid>\n        </main>\n      </>\n    );\n  }\n}\n\nexport default withStyles(styles)(PostEditor);\n","import React, { Component } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport PostEditor from './components/pages/PostEditor';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <CssBaseline />\n        <PostEditor />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}